姜豪   2018011919   6班
《JavaScript权威指南》
第三章 类型、值和变量
计算机程序的运行需要对值进行操作。
编程语言能支持多种数据类型。
当程序需要保存起来以备将来使用时，就将其赋值给一个变量。
变量可以通过名称获得对值的引用，并且是值的符号名称，
其工作机制是编程语言的另一个基本特性。
JavaScript的数据类型分为两种：
1.原始类型:数字，字符串，布尔值。（原始值不可修改）                                               
2.对象类型：属性的集合（由名/值对构成），对象是可变的，可以修改。
JavaScript的类型也可分为可以或不能拥有方法的两种类型以及可变和不可变的类型。
JavaScript特殊的原始值：null(空)，underfined(未定义)。
JavaScript比较特殊的对象：全局对象（global object）。
JavaScript普通的对象：“命名值”的无序集合。
JavaScript定义的特殊对象：
1.数组（array)，表示代编号的值的有序集合。                                         
2.函数，具有与其相关联的可执行代码的对象。
构造函数：函数用来初始化一个新建的对象。
JavaScript不区分整数值和浮点数值，所有的数字均用浮点数值表示，
而且在实际的操作是基于32位整数。
数字出现在JavaScript程序中为数字直接量。
浮点型直接量可以含有小数点，采用的是传统的实数写法.一个实数有整数部分、
小数点.小数部分组成。
JavaScript的算数运算符：加法，减法，乘法，除法，求余。
JavaScript的算数运算在溢出，下溢或被零整数除时不会报错。
JavaScript的非数值和任何值都不相等，包括自身。
JavaScript通过浮点数的形式只能表示其中有限的个数，使用实数时，
只是真实值的一个近似表示。
JavaScript语言核心包括Date构造函数，用来创建表示日期和时间的对象。
JavaScript通过字符串类型来表示文本，而且字符串是固定不变的。
字符串（由16位值组成的不可变的有序序列）直接量是由单引号或双引号括起来的字符序列。
JavaScript的内置功能之一就是字符串连接。
RegExp定义了RegExp构造函数，其可以创建表示文本匹配的对象。
RegExp（正则表达式）和String定义了利用正则表达式进行模式匹配和查找与替换的函数。
RegExp和Date一样，只是一种具有实用API的特殊对象，
具有直接量写法，可以直接在JavaScript程序中使用。
布尔值指代真或假.开或关.是或否。这个类型只有两个值，保留字true或false。
null是JavaScript语言的关键字，表示一个特殊值，
常用来描述‘空值’，这个特殊的对象值含义是‘非对象’。
underfined可以表示值的空缺，是变量的一种取值，表示变量没有初始化。
underfined和null是不同的，但都可以表示‘值的空缺’，可以互换。
全局对象的属性是全局定义的符号，在JavaScript程序中可以直接使用。
JavaScript对象是一种复合值：它是属性或已命名的集合。
JavaScript的取值类型非常灵活，可以提供任意类型值，
它会根据需要自行转换类型，由于可以灵活的类型转换，
但是一个值转换为另一个值并不意味着两个值相等。
尽管JavaScript可以自动做许多类型转换，但有时需要做显示转换，
或者为了使代码变得清晰易读而做显示转换。

对象转换布尔值：所有的对象（包括数组和函数）都转换位ture。
对象转换字符串或数字：通过调用待转换对象的一个方法来完成的，
只适用于本地对象（native object）。
所有对象继承了两个转换方法：
1.toString，作用是返回一个反映这个对象的字符串。                                             
2.valueOf,   如果存在任意原始值，那就默认将对象转换位表示它的原始值。                                                               
如果对象是复合值，而且大多数对象无法真正的表示一个原始值，                                                               
因此默认的valueOf方法简单地返回对象本身，而不是返回一个原始值。

3.9变量声明
在JavaScript程序中，使用一个变量之前应当先声明。
变量是使用关键字var来声明的，也可以通过一个var关键字来声明多个变量，
而且还可以将变量的初始赋值和变量声明和写在一起，
若未在var声明语句中给变量指定初始值，那么虽然声明了这个变量，
但在给它存入一个值之前，它的初始值就是underfined.

3.10变量作用域
变量的作用域（scope）是程序源代码中定义这个变量的区域。
全局变量拥有全局作用域，在JavaScript代码中任何地方都是由定义的。
然而在函数内声明的变量只在函数体内有定义，函数参数是局部变量，
只在函数体内有定义。
在函数体内，局部变量优先于同名的全局变量。

《深入理解JavaScript》
第八章 值
在JavaScript中，所有的常规值都有属性。
每一个属性有一个key（或name）和一个value。
可以将属性看成一个个记录的集合。
可以通过点（.）运算符来访问属性。

8.1 JavaScript中的类型体系
JavaScript只含有6种类型：
Undefined，Null，Boolean，String，Number，Object
JavaScript是动态类型的语言：变量的类型在编译时是不确定的。
JavaScript可以执行非常有限的动态类型检查。
如果访问一个不存在的属性值，将会得到undefined
JavaScript内置的转换机制只支持布尔值、数字、字符和对象。

8.2 原始值和对象
JavaScript中原始值包括布尔值、数字、字符串、null和undefined
其他的值都是对象。
两者之间最主要的区别是类别内是如何互相比较的。
每一个对象都有唯一的标识符并且只和自身相等。
相反，所有的原始值，只要编码值相同，则被认为相等。
原始值具有的特点：（1）按值进行比较
（2）其属性不能被改变、添加或移除
（3）固定类型的组合，不能够自定义原始值
对象具有以下特点：
（1）按引用进行比较 
每个值都有各自的身份标识，比较引用时会比较对象的身份标识
（2）默认可变
对象属性可以很自由地被改变、添加和移除
（3）用户可拓展
构造函数可被看作是自定义类型的补充。

8.3 undefined和null
undefined表示“没有值”（既不是原始值也不是对象）。
访问未初始化的变量、缺失的参数，以及缺失的属性会返回这个空值。
并且如果函数中没有任何显式的返回值时，则会隐式地返回undefined。
null的意思是“没有对象”。在用到对象的时候它表示空值
（比如参数、对象链中的最后一个元素等）
undefined和null是仅有的在访问任何属性抛出异常时都会得到的值。
false，0，NaN也可以被认为是false。
undefined是全局变量的一个属性（同时也是一个全局变量）

8.4 原始值的包装对象
布尔值、数字和字符串这三种原始值都有相应的构造函数：
Boolean，Number，String。他们的实例（称为包装对象）包含原始值。
这些构造函数有两种用法：
作为构造函数，它们创建的对象和它们包装的原始值有很大的不同。
作为函数，它们会将值转换为相应的原始值。

8.5 强制类型转换
强制类型转换指的是值从一种类型隐式地转换成另外一种类型。
乘法运算符（*）的运算数会强制转换成数字。
在加法运算中，如果其中一个运算数为字符串，
加法运算符（+）会将另一个运算数转换为字符串。
Boolean（）转换成布尔值
下面的值都将被转换成false，成为“假值”：
undefined，null，false，0，NaN，‘’
其他值被称为“真值”并且会被转换为‘true’（包括所有的对象）
Number（）转换为数字：
undefined会转换成NaN；null会转换成0；
false会转换成0；true会转换成1；
字符串会被解析；对象会先转换为原始值，然后再转换为数字。
String（）转换为字符串。
对象会先转换为原始值，然后再转换为字符串。
Object（）把任意值转换为对象，对象会转换为他们自身，
undefined和null会转换成空对象，而原始值会转换为包装后的原始值。
ToPrimitive（）将值转换为原始值。















