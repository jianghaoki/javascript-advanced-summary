姜豪   2018011919   6班
《JavaScript权威指南》
第四章 表达式和运算符
变量名也是一种简单的访问表达式，它的值就是赋值给变量的值。
复杂表达式是由简单表达式组成的。
比如，数组访问表达式是由一个表示数组的表达式、左方括号、一个整数表达式和右方括号构成。
同样的，函数调用表达式由一个表示函数对象的表达式和0个或多个参数表达式构成。
4.1原始表达式
原始表达式是表达式的最小单位——它们不再包含其他表达式。
JavaScript中的原始表达式包含常量或直接量、关键字和变量。
直接量是直接在程序中出现的常数值。
第三种原始表达式是变量:
i  //返回变量i的值
sum  //返回sum的值
undefined  //undefined是全局变量，和null不同，它不是一个关键字
当JavaScript代码中出现了标识符，JavaScript会将其当做变量而去查找它的值。
如果变量名不存在，表达式运算结果为undefined。

4.2对象和数组的初始化表达式
对象和数组初始化表达式实际上是一个新创建的对象和数组。
这些初始化表达式有时称做“对象直接量”和“数组直接量”。
然而和布尔直接量不同，它们不是原始表达式，因为它们所包含的成员或元素都是子表达式。
数组初始化表达式是通过一对方括号和其内由逗号隔开的列表构成的。
初始化的结果是一个新创建的数组。数组的元素是逗号分隔的表达式的值:
数组初始化表达式中的元素初始化表达式也可以是数组初始化表达式。
也就是说，这些表达式是可以嵌套的:
var matrix=[[1，2，3]，[4，5，6]，[7，8，9]]；
JavaScript对数组初始化表达式进行求值的时候，
数组初始化表达式中的元素表达式也都会各自计算一次。
也就是说，数组初始化表达式每次计算的值有可能是不同的。
数组直接量中的列表逗号之间的元素可以省略，这时省略的空位会填充值undefined。
数组直接量的元素列表结尾处可以留下单个逗号，这时并不会创建一个新的值为undefined的元素。
对象初始化表达式和数组初始化表达式非常类似，
只是方括号被花括号代替，并且每个子表达式都包含一个属性名和一个冒号作为前缀:
var p={x:2.3,y:-1.2}；  //一个拥有两个属性成员的对象
var q={}；  //一个空对象
q.x=2.3；q.y=-1.2；  //q的属性成员和p的一样
对象直接量也可以嵌套。
JavaScript求对象初始化表达式的值的时候，对象表达式也都会各自计算一次，
并且它们不必包含常数值:它们可以是任意JavaScript表达式。
同样，对象直接量中的属性名称可以是字符串而不是标识符。

4.3函数定义表达式
函数定义表达式定义一个JavaScript函数。表达式的值是这个新定义的函数。
函数定义表达式同样可以包含函数的名字。
函数也可以通过函数语句来定义，而不是函数表达式。
4.4属性访问表达式
属性访问表达式运算得到一个对象属性或一个数组元素的值。
第一种写法是一个表达式后跟随一个句点和标识符。
表达式指定对象，标识符则指定需要访问的属性名称。
第二种写法是使用括号，方括号内是另外一个表达式（这种方法适用于对象和数组）。
第二个表达式指定要访问的属性的名称或者代表要访问数组元素的索引。

4.5调用表达式
JavaScript中的调用表达式是一种调用（或者执行）函数或方法的语法表示。
任何一个调用表达式都包含一对圆括号和左圆括号之前的表达式。
4.6对象创建表达式
对象创建表达式创建一个对象并调用一个函数（这个函数称做构造函数）初始化新对象的属性。
对象创建表达式和函数调用表达式非常类似，只是对象创建表达式之前多了一个关键字new:
new Object（）
如果一个对象创建表达式不需要传入任何参数给构造函数的话，那么这对空圆括号是可以省略掉的:
new Object
当计算一个对象创建表达式的值时，和对象初始化表达式通过{}创建对象的做法一样，
JavaScript首先创建一个新的空对象，然后，JavaScript通过传入指定的参数并将
这个新对象当做this的值来调用一个指定的函数。这个函数可以使用this来初始化这个
新创建对象的属性。那些被当成构造函数的函数不会返回一个值，
并且这个新创建并被初始化后的对象就是整个对象创建表达式的值。
如果一个构造函数确实返回了一个对象值，那么这个对象就作为整个对象创建表达式的值，
而新创建的对象就废弃了。

4.7运算符概述
JavaScript中的运算符用于算术表达式、比较表达式、逻辑表达式、赋值表达式等。
需要注意的是，大多数运算符都是由标点符号表示的，比如“+”和“=”。
而另外一些运算符则由关键字表示的，比如delete和instanceof。
关键字运算符和标点符号所表示的运算符一样都是正规的运算。
运算符可以根据其操作数的个数进行分类。
JavaScript中的大多数运算符（比如“*”乘法运算符）是一个二元运算符,
将两个表达式合并成一个稍复杂的表达式。换言之，它们的操作数均是两个。
JavaScript同样支持一些一元运算符,
它们将一个表达式转换为另一个稍复杂的表达式。
表达式-x中的“-”运算符就是一个一元运算符，是将操作数x求负值。
最后，JavaScript支持一个三元运算符,条件判断运算符“？:”，
它将三个表达式合并成一个表达式。
计算-一个简单的表达式不会对程序的运行状态造成任何影响，
程序后续执行的计算也不会受到该计算的影响。
而有一些表达式则具有很多副作用，前后的表达式运算会相互影响。
乘法运算符“*”比加法运算符“+”具有更高的优先级，所以乘法先执行，加法后执行。
然后，由于赋值运算符“=” 具有最低的优先级，
因此赋值操作是在右侧的表达式计算出结果后进行的。

4.8算术表达式
二元加法运算符“+”可以对两个数字做加法，也可以做字符串连接操作。
当两个操作数都是数字或都是字符串的时候，计算结果是显而易见的。
然而对于其他情况来说，则要进行一些必要的类型转换，
并且运算符的行为依赖于类型转换的结果。
加号的转换规则优先考虑字符串连接，如果其中-一个操作数是字符串或者转换为字符串的对象，
另外一个操作数将会转换为字符串，加法将进行字符串的连接操作。
如果两个操作数都不是类字符串的，那么都将进行算术加法运算。
如果其中-一个操作数是对象，则对象会遵循对象到原始值的转换规则转换为原始类值
valueOf()方法执行转换(如果value0f()方法返回一个原始值的话)。
由于多数对象都不具备可用的value0f()方法，因此它们会通过toString()方法来执行转换。
在进行了对象到原始值的转换后，如果其中一个操作数是字符串的话，
另-一个操作数也会转换为字符串，然后进行字符串连接。
否则，两个操作数都将转换为数字(或者NaN)，然后进行加法操作。
当加号运算符和字符串和数字一起使用时，需要考虑加法的结合性的对运算顺序的影响。
也就是说，运算结果是依赖于运算符的运算顺序的。
一元运算符作用于-一个单独的操作数，并产生-一个新值。
在JavaScript中， 一元运算符具有很高的优先级，而且都是右结合 。
“+”和“-”是一元运算符，也是二元运算符。
按位异或(^)按位非(~)
运算符“~”是一元运算符，位于一个整型参数之前，它将操作数的所有位取反。
左移(<<)
将第一个操作数的所有二进制位进行左移操作,移动的位数由第二个操作数指定,
移动的位数是0~31之间的一个整数。
带符号右移(>>)
将第一个操作数的所有位进行右移操作的位由原操作数的符号决定，
以便保持结果的符号与原操作数- -致。
如果第- -个操作数是正数，移位后用0填补最高位；
如果第-一个操作数是负的，移位后就用1填补高位。
将-一个值右移1位，相当于用它除以2 (忽略余数)，
右移两位，相当于它除以4，以此类推。
无符号右移(>>>)
运算符“>>>”和运算符“>>" 一样，只是左边的高位总是填补0，与原来的操作数符号无关。

4.9关系表达式.
“==”和“==="运算符用于比较两个值是否相等，当然它们对相等的定义不尽相同。
两个运算符允许任意类型的操作数，如果操作数相等则返回true,否则返回false.
“==”也称为严格相等运算符它用来检测两个操作数是否严格相等。
“==” 运算符称做相等运算符，它用来检测两个操作数是否相等，
这里“相等”的定义非常宽松，可以允许进行类型转换.
如果两个值类型不相同，则它们不相等。
如果两个值都是null或者都是undefined,则它们不相等。
如果两个值都是布尔值true或都是布尔值false,则它们相等。
如果其中一个值是NaN,或者两个值都是NaN,则它们不相等。
NaN和其他任何值都是不相等的，包括它本身!通过x!==x来判断x是否为NaN,
只有在x为NaN的时候，这个表达式的值才为true.
如果两个值为数字且数值相等，则它们相等。如果一个值为0，另- 一个值为-0，则它们同样相等。
如果两个值为字符串，且所含的对应位上的16位数(参照3.2节)完全相等，则它们相等。
如果它们的长度或内容不同，则它们不等。
比较运算符用来检测两个操作数的大小关系(数值大小或者字母表的顺序) : 
小于(<)
如果第一个操作数小于第二个操作数，则“<"运算符的计算结果为true;否则为false.
大于(>)
如果第-一个操作数大于第二个操作数，则“>" 运算符的计算结果为true;否则为false.
小于等于(<=)
如果第一个操作数小于或者等于第二个操作数，则“<="运算符的计算结果为true;否则为false.
大于等于(>=)
如果第一个操作数大于或者等于第二个操作数，则">=" 运算符的计算结果为false;否则为false.
比较操作符的操作数可能是任意类型。

4.10逻辑表达式
“&&”运算符可以从三个不同的层次进行理解。
最简单的第- - 层理解是，当操作数都是布尔值的时候，
“&&” 对两个值执行布尔与(AND) 操作，
只有在第一一个操作数和第二个操作数都是true的时候，它才返回true。
如果其中-一个操作数是false,它返回false.
“||”运算符对两个操作数做布尔或(OR) 运算。
如果其中一个或者两个操作数是真值，它返回一个真值。
如果两个操作数都是假值，它返回一个假值。
“!”运算符是-元运算符。它放置在一个单独的操作数之前。
它的目的是将操作数的布尔值进行求反。
例如，如果x是真值，则!x返回false; 如果x是假值，则!x返回true.
和“&&”与“|I”运算符不同，“!" 运算符首先将其操作数转换为布尔值。
作为一个一元运算符，“!" 具有很高的优先级，并且和操作数紧密绑定在一起。
typeof是一-元运算符，放在其单个操作数的前面，操作数可以是任意类型。
返回值为表示操作数类型的一一个字符串。

第五章 语句
JavaScript中有很多语句和控制结构来改变语句的默认执行顺序：
条件语句，JavaScript解释器可以根据一个表达式的值来判断
是执行还是跳过这些语句，如if语句和switch语句。
循环语句，可以重复执行，如while和for语句。
跳转语句，可以让解释器跳转至程序的其他部分继续执行，
如break、return和throw语句。
5.1 表达式语句
递增运算符（++）和递减运算符（--）和赋值语句有关。
它们的作用是改变一个变量的值，像执行一条赋值语句一样。
delete运算符的作用是删除一个对象的属性，所以它一般作为语句使用，
而不是作为复杂表达式的一部分。

5.2 复合语句和空语句
JavaScript中可以将多条语句联合在一起，形成一条复合语句。
只需用花括号将多条语句括起来即可。
①语句块的结尾不需要分号但块中原始语句必须以分号结束。
②语句块中的行都有缩进，这不是必需的，
但整齐的缩进能使代码可读性更强，更容易理解。
③JavaScript中没有块级作用域语句块中声明的变量并不是语句块私有的。
JavaScript解释器执行空语句时不会执行任何动作。
在JavaScript中当希望多条语句被当做一条语句使用时，使用复合语句来代替。
空语句则恰好相反，它允许包含0条语句的语句。
5.3 声明语句
var语句用来声明一个或者多个变量。
关键字var之后跟随的是要声明的变量列表，列表中的每一个变量都可以
带有初始化表达式，用于指定它的初始值。
如果var语句出现在函数体内，那么它定义的是一个局部变量，其作用域就是这个函数。
如果在顶层代码中使用var语句，它声明的是全局变量，在整个JavaScript程序中是可见的。
全局变量是全局对象的属性，var声明的变量无法通过delete删除。
如果var语句中的变量没有指定初始化表达式，那么这个变量的值初始为undefined。
var语句同样可以作为for循环或者for/in循环的组成部分。
function是要声明的函数的名称的标识符。
函数名之后的圆括号中是参数列表，参数之间使用逗号分隔。
当调用函数时。这些标识符则指代传入函数的实参。
函数体是由JavaScript语句组成的，语句的数量不限，且用花括号括起来。
在定义函数时，并不执行函数体内的语句，它和调用函数时待执行的新函数对象相关联。
和var语句一样，函数声明语句创建的变量也是无法删除的。
但是这些变量不是只读的，变量值可以重写。

5.4 条件语句
条件语句是可以通过判断指定表达式的值来决定执行还是跳过某些语句。
JavaScript语法规定，if关键字和带圆括号的表达式之后必须跟随一条语句，
但可以使用语句块将多条语句合并成一条。
if/else语句通过判断一个表达式的计算结果来选择执行两条分支中的一条。
关键字switch之后紧跟着圆括号括起来的一个表达式，随后是一对花括号括起来的代码块。
在每一个case语句块的结尾处都使用了关键字break。
case关键字后跟随的是数字和字符串直接量。
表达式和case的匹配并不会做任何类型转换。
5.5 循环
if语句是一种基本的控制语句，用来选择执行程序的分支语句。
do循环要求必须使用关键字do来标识循环的开始，用while来标识循环的结尾并进入循环条件判断。
和while循环不同，do循环是用分号结尾的。
如果while的循环体使用花括号括起来的话，则while循环也不用使用分号做结尾。
for/in循环可以像枚举对象属性一样枚举索引。
如果for/in的循环体删除了还未枚举的属性，那么这个属性将不会再枚举到。
对象继承了可枚举属性，对象具有整数数组索引的属性。
使用delete删除了对象已有的属性，使用object.defineProperty或者类似的方法改变了对象的属性。

5.6 跳转
跳转语句使得JavaScript的执行可以从一个位置跳转到另一个位置。
break语句是跳转到循环或者其他语句的结束。
continue语句是终止本次循环的执行并开始下一次循环的执行。
return语句让解释器跳出函数体的执行，并提供本次调用的返回值。
语句是可以添加标签的，标签是由语句前的标识符和冒号组成。
标签的命名空间和变量或函数的命名空间是不同的。
单独使用break语句的作用是立即退出最内层的循环或switch语句。
JavaScript中同样允许break关键字后面跟随一个语句标签（只有标识符，没有冒号）
当break和标签一块使用时，程序将跳转到这个标签所标识的语句块的结束，
或者直接终止这个闭合语句块的执行。
在do/while循环中，程序的执行直接跳到循环结尾处，
这时会重新判断循环条件，之后才会继续下一次循环。
在for/in循环中，循环开始遍历下一个属性名，这个属性名赋给了指定的变量。
return语句只能在函数体内出现，如果不是的话会报语法错误。
当执行到return语句的时候，函数终止执行，并返回expression的值给调用程序。
如果没有return语句，则函数调用仅依次执行函数体内的每一条语句
直到函数结束，最后返回调用程序。
抛出异常，就是信号通知发生了错误或异常情况。
捕获异常是指处理这个信号，即采取必要的手段从异常中恢复。
在JavaScript中，当产生运行时错误或者程序使用throw语句时就会显式地抛出异常。
expression的值可以是任意类型的。
当抛出异常时，JavaScript解释器会立即停止当前正在执行的逻辑，
并跳转至就近的异常处理程序。
try/catch/finally语句是JavaScript的异常处理机制。
其中try从句定义了需要处理的异常所在的代码块。
catch从句跟随在try从句之后，当try块内某处发生了异常时，catch内的代码逻辑。
catch从句后跟随finally块，后者中放置清理代码，
不管try块中是否产生异常，finally块内的逻辑总是会执行。
尽管catch和finally都是可选的，但try从句需要至少二者之一与之组成完整的语句。
try、catch和finally语 句块都需要使用花括号括起来，
这里的花括号是必需的，即使从句中只有一条语句也不能省略花括号。

《深入理解JavaScript》
第九章 运算符
9.1 运算符和对象
在JavaScript中会先将数组转换成字符串，然后再把它们拼接起来。
在JavaScript中无法重载或者自定义运算符，包括等号。
9.2 赋值运算符
复合赋值运算符op=对两边的运算数做op运算，并将结果赋值给第一个运算数。
算术运算符、位运算符，字符拼接。
9.3 等号运算符：===和==
JavaScript有两种方式来判断两个值是否相等。
严格相等(===) 和严格不等(! ==)要求比较的值必须是相同的类型。
普通相等(==)和不等(!=)会先尝试将两个不同类型的值进行转换，再使用严格相等进行比较。
9.4 排序运算符
JavaScript中有以下几种排序运算符:
小于号(<);小于等于号(<=);大于号(>);大于等于号(>=)。
9.5 加号运算符（+）
如果其中一个是字符串，另一个也会被转换为字符串，并对它们进行拼接。
否则，两个运算数都会被转变为数字并相加。
9.6 布尔运算符和数字运算符
布尔运算符：
二元逻辑运算符：与（&&）或（||）；逻辑非：（！）
数字运算符：
算术运算符，位运算符
9.7 特殊运算符
条件运算符是一个表达式：
如果判断条件为true，则结果是if_true；否则，结果是if_false
逗号运算符会执行两边的运算数并返回right部分的结果。
void（）等同于undefined，，避免表达式返回结果。
9.8 通过typeof和instanceof判断值类型
typeof运算符能区分原始值和对象，并检测出原始值的类型。
instanceof运算符可以检测一一个对象是否是特定构造函数的一个实例。
9.9 对象运算符
new：调用一个构造参数。
delete：删除一个属性。
in：检测一个对象是否包含一个给定的属性。

第十三章 语句
13.1 声明和变量赋值
var用来声明变量，可以用来创建变量并使用变量。
13.2 循环语句和条件语句的主体
合成语句往往包含有多个“主体”，而主体包含多条语句时则需要使用块。
13.3 循环
break跳出整个循环。
Continue跳出本地的循环体，立即进入下一次的循环体。
标签是一个紧跟了冒号的标示符。
当标签在循环体之前时，你可以从循环体(甚至是嵌套的循环)中使用标签
跳出整个或单个循环。当标签在块之前时，你可以用标签跳出块。
这两种情况下，标签名都是作为break或者continue 的参数进行使用。
不要用for-in来遍历数组。
第一，for-in只会遍历索引，而不是数组元素。
其次，for-in还会遍历所有的（非索引）属性值。
13.4 条件语句
switch语句会将其参数true与各个case中的表达式的值作比较。
如果其中一个表达式的值为true，那么就会执行后面的代码体。
13.5 with语句
他会将object的属性转变为本地变量提供给statement语句部分。
它往往被用于避免过于冗余的对象调用，使用with可以缩短调用。





