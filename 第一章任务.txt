姜豪   2018011919   6班
《深入理解JavaScript》第一部分知识点总结
1.1背景
JavaScript指的是一种编程语言。

1.2语法
一个单独的等于号（=）用于为变量赋值。
三个连续的等于号（===）用于比较两个值。
在JavaScript中，分号用于结束语句，而不是结束块。
JavaScript有两种类型的注释：单行注释和多行注释。
单行注释由两个斜杠 //开始，行终止时结束。
多行注释限定在/*和*/之间。

1.3变量和赋值
JavaScript里的变量在声明后使用：var foo;
变量声明和赋值可以同时进行：var foo=6;
也可以为一个已有变量进行赋值：foo=4;
变量的名字就是一个标识符。标识符区分大小写。
标识符的第一个字符可以是任意Unicode字符、美元符，或者下划线（_）
后面的字符除此之外还可以为任意Unicode数字。

1.4值
在JavaScript中所有的值都有属性。
每一个属性都有一个key（或者是name）和一个value。
在JavaScript中，原始值包括布尔值、数字、字符串、null和undefined
其他的值都是对象。
两者之间最主要的区别在于它们的比较方式；
每个对象都有唯一的标识且只等于自己；
相反，所有的原始值，只要编码值相同，则被认为相等。
原始值具有以下特点：
（1）按值进行比较
（2）不可改变：其属性值不能被改变、添加或移除。
所有的非原始值都是对象。
简单对象，可以通过对象字面量来创建。
数组，可以通过数组字面量来创建。
正则表达式，可以通过数组字面量来创建。
对象具有以下特点：
（1）按引用进行比较
（2）默认可变：对象属性可自由地被改变、添加和移除
未被初始化的变量即为undefined；丢失的参数也会是undefined；
访问不存在的属性，也会得到undefined。
null在用到对象的的时候表示空值。
undefined和null没有属性，toString（）也没有。
函数允许透过undefined或null来表示缺失的值。
typeof的返回值会是一个表示这个值“类型”的字符串。

1.5布尔值
原始布尔类型包含true和false两个值。
在JavaScript中，可以使用任意值来表示布尔值。
它们被解释成true或false。以下的值会被解释成false。
undefined、null。布尔值：false。数字：-0、NAN。字符串：‘’。
其他所有的值（包括所有的对象）都会被当成true。
被解释为false的值可称为假值，被解释为true的值可被称为真值。
Boolean（）作为函数调用时，会将传入的参数转换为一个布尔值。
JavaScript有两种类型的相等。
常规的，或“宽松的”相等（或不相等）：==和！=
严格的相等（或不相等）：===和！==

1.6数字
JavaScript中所有的数字都是浮点数；也包含一些特殊的数字。
Infinity比任何一个数都要大（NAN除外）。
-Infinity比任何一个数都要小（NAN除外）。
这使得这两个数字常用来作为默认值。

1.7运算符
JavaScript具有如下算术运算符：
加法、减法、乘法、除法、取模、增量、减量、负数、转变成数字
全局对象Math还会以函数的方式提供更多算术运算。

1.8字符串
字符串可以直接通过字符串自变量来创建。
这些字面量限定在单引号或双引号之内。
反斜杠（\）用于转义字符及产生一些控制字符。
可以通过方括号来访问字符串中的单个字符。
字符串的length属性可以对字符的个数进行计数。
字符串可以通过加号（+）进行连接，如果其中一个运算数是字符串的话，
另一个运算数将被转换为字符串。
要在多个步骤中连接字符串，可以使用+=运算符。

1.9语句
条件语句：
if语句有一个then从句以及一个可选的else从句
switch-case语句
循环语句：
for循环，初始化会在循环开始前执行。
do-while循环语句在条件成立时会持续循环。
break可以跳离循环；
continue会开始一个新的循环迭代。

1.10函数
可以通过函数声明的方式来定义函数；
还可以通过给变量add赋值为函数表达式的方式来定义add函数。
函数表达式会产生一个值，因此可以将函数作为参数直接传递给另外的函数
在JavaScript中，函数的所有参数都可以被自由调用，
它会通过arguments变量来使所有参数可用。
arguments看起来像个数组，但不具备数组的方法。
toArray（）函数会在“将arguments转换为数组”中出现。
额外的参数会被忽略，丢失的参数会得到undefined的值。
如果想强制一个参数长度（指定的参数长度），
可以通过arguments.length来检查。

1.11异常捕获
function getPerson(id){
      if(id<0){
      throw new Error( 'ID mustnot be negative: '+id);
      }
      return {id: id}; 
}
function getPersons(ids){
      var result = [] ;
      ids . forEach(function (id){
          try {
              var person = getPerson(id);
              result. push(person);
      } catch (exception){
          console.log(exception); 
      }]);
      return result;
}
使用try语句包裹关键代码，如果try语句有异常会被抛出，
那么catch语句就会执行。

1.12严格模式
严格模式激活更多的警告以及使JavaScript变得更干净。
要更换到严格模式，在JavaScript文件或者<script>标签第一行输入。

1.13变量作用域和闭包
在JavaScript中，通过在变量前使用var语句声明变量。
也可以使用单个var语句声明和初始化多个变量。
一个变量的作用域总是完整的函数（相对于当前块）。
所有变量声明都会被提升：声明会被移动到函数的开始处，
而赋值则仍然会在原来的位置进行。
函数以及它所连接的周围作用域中的变量即为闭包。

1.14对象和构造函数
每个属性都是一个（键，值）对。
键名都是字符串，而值可以是JavaScript的任意值。
在JavaScript中，可以直接通过对象字面量去创建普通对象。
以函数作为值的属性被称为方法，使用this对调用它们的对象进行引用。
如果读取一个不存在的属性，会得到undefined。
使用delete运算符移除属性。
如果想用其他的字符串作为属性名，则必须将它们用引号引起来，
再通过对象字面量和方括号来获取或设置这个属性。
方括号可以用来动态计算属性键名。
构造函数包含两部分：
第一部分，Point函数设置实例数据。
第二部分，Point.prototype属性包含一个带有方法的对象。
可以通过new运算符来使用Point。

1.15数组
数组字面量可以方便地创建数组元素。
length属性表明数组有多少元素。
遍历数组最重要的方法是forEach以及map。
forEach迭代数组并且将当前的元素和元素的index扔到一个函数中。











